

small_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]  # 素数列表


def get_pq(n):
    for p in small_primes:
        if n % p == 0:
            return p, int(n/p)


def get_d(e, phi_n):
    """计算d"""
    print('de 三等号 1(mod φ(n))')
    print('=====d的计算过程,k系数为1时，另d=1，d系数为1时，另k=0倒序代入======')
    print('{}d-{}k=1'.format(e, phi_n))
    arg1 = e
    arg2 = phi_n
    while arg1 != 1 and arg2 != 1:
        if arg2 > arg1:
            arg2 = arg2 % arg1
            print('{}d-{}k=1'.format(arg1, arg2))
        else:
            arg1 = arg1 % arg2
            print('{}d-{}k=1'.format(arg1, arg2))
    print('====计算机求d===')
    for i in range(1, 10000):
        if (phi_n * i + 1) % e == 0:
            break
    print('{}d-{}×{}=1'.format(e, phi_n, i))
    d = int((1 + phi_n * i) / e)
    return d


def get_mod(a, b, a_pow=1):
    """取模"""
    print('{} = {} (mod {})'.format(a, a % b, b))
    if a_pow > 1:
        print('{}**{} = {} (mod {})'.format(a, 2, a**2 % b, b))
    if a_pow > 3:
        print('{}**{} = {} (mod {})'.format(a, 4, a**4 % b, b))
    return a**a_pow % b


if __name__ == "__main__":
    """数论计算"""
    n, e = 3599, 31
    print('=========求p,q==============')
    p, q = get_pq(n)
    print('p={},q={}'.format(p, q))
    phi_n = (p - 1) * (q - 1)
    print('=========求φ(n)=========')
    print('φ(n)=(p-1)(q-1)={}×{}={}'.format(p-1, q-1, phi_n))
    print('=========求d=========')
    d = get_d(e, phi_n)
    print('d={}'.format(d))
